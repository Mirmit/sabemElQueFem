{% extends sonata_block.templates.block_base %}

{% block block %}
    <div id="invoceableWeeklyHours">
      <h3>Hores facturables setmanals</h3>
      <svg style="height: 400px; width: 600px"/>
    </div>
    <div>
      <div id="stackedBarDiv">
        <h3>Hores diàries treballades</h3>
        <ul>
          <li style="color: #f28e2c">No facturable</li>
          <li style="color: #e15759">Facturable</li>
        </ul>
      </div>
    </div>
    <script type="module">
      import * as d3 from "https://cdn.skypack.dev/d3@7";

      // New barchart, weekly invoiced total hours
      let weeklyInvoicedHours = JSON.parse('{{ weeklyData|json_encode|raw }}');
      weeklyInvoicedHours = weeklyInvoicedHours.map(d => (
              {
                firstDayOfWeek: d.firstDayOfWeek,
                totalHours: +d.totalHours
              }
      ))
      console.log(d3.select("#invoceableWeeklyHours").attr('width'))
      const margin = 60;
      const width = 400 - 2 * margin;
      const height = 400 - 2 * margin;

      const svg = d3.select('svg');
      const weeklyBarChart = svg.append('g')
        .attr('transform', `translate(${margin}, ${margin})`);

      // Drawing y Axis
      const yScale = d3.scaleLinear()
        .range([height, 0])
        .domain([0, 30]);
      weeklyBarChart.append('g')
        .call(d3.axisLeft(yScale).ticks(6));

      // Drawing x axis
      const xScale = d3.scaleBand()
        .range([0, width])
        .domain(weeklyInvoicedHours.map((d) => d.firstDayOfWeek))
        .padding(0.2)
      weeklyBarChart.append('g')
        .attr('transform', `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      // Drawing the bars
      weeklyBarChart.selectAll()
        .data(weeklyInvoicedHours)
        .enter()
        .append('rect')
        .attr('id', 'weeklyBars')
        .attr('x', (d) => xScale(d.firstDayOfWeek))
        .attr('y', (d) => yScale(d.totalHours))
        .attr('height', (d) => height - yScale(d.totalHours))
        .attr('width', xScale.bandwidth())
      // Highlight each bar on mouse enter and draw horizontal line
        .on('mouseenter', function (actual, i) {
          d3.selectAll('.value')
            .attr('opacity', 0)

          d3.select(this)
            .transition()
            .duration(300)
            .attr('opacity', 0.6)
            .attr('x', (d) => xScale(d.firstDayOfWeek) - 5)
            .attr('width', xScale.bandwidth() + 10)

          const y = yScale(i.totalHours);
          weeklyBarChart.append('line')
            .attr('id', 'limit')
            .attr('x1', 0)
            .attr('y1', y)
            .attr('x2', width)
            .attr('y2', y)
            .attr('stroke', 'red')
          weeklyBarChart.append('text')
            .attr('id', 'labelTotalHours')
            .attr('x', xScale(i.firstDayOfWeek) + margin / 2)
            .attr('y', yScale(i.totalHours) - 5)
            .attr('text-anchor', 'middle')
            .text(i.totalHours)
        })
      .on('mouseleave', function () {
        d3.selectAll('.value')
        .attr('opacity', 1)

        d3.select(this)
        .transition()
        .duration(300)
        .attr('opacity', 1)
        .attr('x', (d) => xScale(d.firstDayOfWeek))
        .attr('width', xScale.bandwidth())

        weeklyBarChart.selectAll('#limit').remove()
        weeklyBarChart.selectAll('#labelTotalHours').remove()
      })

      // Drawing horizontal lines
      weeklyBarChart.append('g')
        .attr('class', 'grid')
        .attr('id', 'horizontalLines')
        .call(d3.axisLeft()
          .ticks(6)
          .scale(yScale)
          .tickSize(-width, 0, 0)
          .tickFormat('')
        )

      // Draw labels
      svg.append('text')
        .attr('x', -(height / 2) - margin)
        .attr('y', margin / 2.4)
        .attr('transform', 'rotate(-90)')
        .attr('text-anchor', 'middle')
        .text('Hores facturables')

      svg.append('text')
        .attr('x', width / 2 + margin)
        .attr('y', height + 1.7 * margin)
        .attr('text-anchor', 'middle')
        .text('Setmana')



      // Working stacked barchart
      let dailyHours = JSON.parse('{{ data|json_encode|raw }}');
      dailyHours = dailyHours.map(d => (
        {
          date: d.date,
          invoiceable: d.invoiceable,
          totalHours: +d.totalHours
        }
      ))
      const newDivToAppend = jQuery('#stackedBarDiv')
      let stackedBarChart = StackedBarChart(dailyHours, {
        x: d => d.date,
        y: d => d.totalHours,
        z: d => d.invoiceable,
        xDomain: dailyHours.map(d => d.date),
        yLabel: "Hores",
        zDomain: [ true, false],
        // colors: [ 'green', 'yellow'],
        width: 500,
        height: 250
      })
      newDivToAppend.append(stackedBarChart);
      // Copyright 2021 Observable, Inc.
      // Released under the ISC license.
      // https://observablehq.com/@d3/stacked-bar-chart
      function StackedBarChart(data, {
        x = (d, i) => i, // given d in data, returns the (ordinal) x-value
        y = d => d, // given d in data, returns the (quantitative) y-value
        z = () => 1, // given d in data, returns the (categorical) z-value
        title, // given d in data, returns the title text
        marginTop = 30, // top margin, in pixels
        marginRight = 0, // right margin, in pixels
        marginBottom = 30, // bottom margin, in pixels
        marginLeft = 40, // left margin, in pixels
        width = 640, // outer width, in pixels
        height = 400, // outer height, in pixels
        xDomain, // array of x-values
        xRange = [marginLeft, width - marginRight], // [left, right]
        xPadding = 0.1, // amount of x-range to reserve to separate bars
        yType = d3.scaleLinear, // type of y-scale
        yDomain, // [ymin, ymax]
        yRange = [height - marginBottom, marginTop], // [bottom, top]
        zDomain, // array of z-values
        offset = d3.stackOffsetDiverging, // stack offset method
        order = d3.stackOrderNone, // stack order method
        yFormat, // a format specifier string for the y-axis
        yLabel, // a label for the y-axis
        colors = d3.schemeTableau10, // array of colors
      } = {}) {
        // Compute values.
        const X = d3.map(data, x);
        const Y = d3.map(data, y);
        const Z = d3.map(data, z);

        // Compute default x- and z-domains, and unique them.
        if (xDomain === undefined) xDomain = X;
        if (zDomain === undefined) zDomain = Z;
        xDomain = new d3.InternSet(xDomain);
        zDomain = new d3.InternSet(zDomain);

        // Omit any data not present in the x- and z-domains.
        const I = d3.range(X.length).filter(i => xDomain.has(X[i]) && zDomain.has(Z[i]));

        // Compute a nested array of series where each series is [[y1, y2], [y1, y2],
        // [y1, y2], …] representing the y-extent of each stacked rect. In addition,
        // each tuple has an i (index) property so that we can refer back to the
        // original data point (data[i]). This code assumes that there is only one
        // data point for a given unique x- and z-value.
        const series = d3.stack()
        .keys(zDomain)
        .value(([x, I], z) => Y[I.get(z)])
        .order(order)
        .offset(offset)
        (d3.rollup(I, ([i]) => i, i => X[i], i => Z[i]))
        .map(s => s.map(d => Object.assign(d, {i: d.data[1].get(s.key)})));

        // Compute the default y-domain. Note: diverging stacks can be negative.
        if (yDomain === undefined) yDomain = d3.extent(series.flat(2));

        // Construct scales, axes, and formats.
        const xScale = d3.scaleBand(xDomain, xRange).paddingInner(xPadding);
        const yScale = yType(yDomain, yRange);
        const color = d3.scaleOrdinal(zDomain, colors);
        const xAxis = d3.axisBottom(xScale).tickSizeOuter(0);
        const yAxis = d3.axisLeft(yScale).ticks(height / 60, yFormat);

        // Compute titles.
        if (title === undefined) {
          const formatValue = yScale.tickFormat(100, yFormat);
          title = i => `${X[i]}\n${Z[i]}\n${formatValue(Y[i])}`;
        } else {
          const O = d3.map(data, d => d);
          const T = title;
          title = i => T(O[i], i, data);
        }

        const svg = d3.create("svg")
        .attr("width", width)
        .attr("height", height)
        .attr("viewBox", [0, 0, width, height])
        .attr("style", "max-width: 100%; height: auto; height: intrinsic;");

        svg.append("g")
        .attr("transform", `translate(${marginLeft},0)`)
        .call(yAxis)
        .call(g => g.select(".domain").remove())
        .call(g => g.selectAll(".tick line").clone()
        .attr("x2", width - marginLeft - marginRight)
        .attr("stroke-opacity", 0.1))
        .call(g => g.append("text")
        .attr("x", -marginLeft)
        .attr("y", 10)
        .attr("fill", "currentColor")
        .attr("text-anchor", "start")
        .text(yLabel));

        const bar = svg.append("g")
        .selectAll("g")
        .data(series)
        .join("g")
        .attr("fill", ([{i}]) => color(Z[i]))
        .selectAll("rect")
        .data(d => d)
        .join("rect")
        .attr("x", ({i}) => xScale(X[i]))
        .attr("y", ([y1, y2]) => Math.min(yScale(y1), yScale(y2)))
        .attr("height", ([y1, y2]) => Math.abs(yScale(y1) - yScale(y2)))
        .attr("width", xScale.bandwidth());

        if (title) bar.append("title")
        .text(({i}) => title(i));

        svg.append("g")
        .attr("transform", `translate(0,${yScale(0)})`)
        .call(xAxis);

        return Object.assign(svg.node(), {scales: {color}});
      }
    </script>
  <style>
    line#limit {
      stroke: #FED966;
      stroke-width: 3;
      stroke-dasharray: 3 6;
    }

    rect#weeklyBars {
      fill: #FFA233;
    }

    g#horizontalLines g line {
      stroke: grey;
      opacity: 0.5;
      z-index: -5;
    }

    svg {
      font-family: 'Open Sans', sans-serif;
    }
  </style>
{% endblock %}
